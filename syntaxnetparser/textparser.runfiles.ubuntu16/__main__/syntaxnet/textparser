#!/usr/bin/env python

import os
import re
import tempfile
import shutil
import sys
import subprocess
import zipfile


def CreatePythonPathEntries(python_imports, module_space):
    parts = python_imports.split(':');
    return [module_space] + ["%s/%s" % (module_space, path) for path in parts]


def FindModuleSpace():
    # Follow symlinks, looking for my module space
    stub_filename = os.path.abspath('textparser')
    while True:
        # Found it?
        module_space = stub_filename + '.runfiles'
        if os.path.isdir(module_space):
            break

        runfiles_pattern = "(.*\.runfiles)/.*"
        matchobj = re.match(runfiles_pattern, os.path.abspath('textparser'))
        if matchobj:
            module_space = matchobj.group(1)
            break

        raise AssertionError('Cannot find .runfiles directory for %s' %
                             'textparser')
    return module_space

# Create the runfiles tree by extracting the zip file


def CreateModuleSpace():
    ZIP_RUNFILES_DIRECTORY_NAME = "runfiles"
    temp_dir = tempfile.mkdtemp("", "Bazel.runfiles_")
    # mkdtemp return absolute name
    temp_dir = FixAbsWindowsPath(temp_dir)
    # __file__ will be either empty or the absolute path to this script
    # Not handling empty, since it was not handled before
    zf = zipfile.ZipFile(FixAbsWindowsPath(os.path.dirname(__file__)))
    zf.extractall(temp_dir)
    return os.path.join(temp_dir, ZIP_RUNFILES_DIRECTORY_NAME)

# Returns repository roots to add to the import path.


def GetRepositoriesImports(module_space, import_all):
    if import_all:
        repo_dirs = [os.path.join(module_space, d) for d in os.listdir(module_space)]
        return [d for d in repo_dirs if os.path.isdir(d)]
    return [os.path.join(module_space, "__main__")]


module_space = FindModuleSpace()

python_imports = 'protobuf/python'
python_path_entries = CreatePythonPathEntries(python_imports, module_space)
python_path_entries += GetRepositoriesImports(module_space, True)
for p in python_path_entries:
    sys.path.insert(0, p)
reload(sys)
